name: Linux Docker Containers
on: push

jobs:
  docker_build_matrix:
    name: Build Toolchain Containers
    # runs-on: [self-hosted, X64]
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - { toolchain_profile: '9.3.0-legacy' }
          - { toolchain_profile: '9.5.0-winxp' }
          - { toolchain_profile: '10.5.0' }
          - { toolchain_profile: '11.5.0' }
          - { toolchain_profile: '12.4.0' }
          - { toolchain_profile: 'stable' }
          - { toolchain_profile: '13.3.0' }
          - { toolchain_profile: '14.2.0' }
          # - { toolchain_profile: '13.3.1-dev' }
          # - { toolchain_profile: '14.2.1-dev' }
          - { toolchain_profile: '15.0.0-dev' }

    steps:
      - uses: actions/checkout@v4
        with:
          path: kos


      - name: Fixup Repo for Container Builds
        run: |
          sed -i -e "s/##gitsha##/$(git describe --always)/g" kos/.github/workflows/make_banner.sh
          cp kos/.github/workflows/make_banner.sh kos/kernel/arch/dreamcast/kernel/make_banner.sh

      - name: Setup .dockerignore
        run: |
          echo "kos/.github"    >  .dockerignore
          echo "kos/.git"       >> .dockerignore
          echo "kos-ports/.git" >> .dockerignore
          cat .dockerignore

      - name: Fixup Repo for Container Builds
        run: |
          cp kos/.github/workflows/make_banner.sh kos/kernel/arch/dreamcast/kernel/make_banner.sh

      - uses: docker/setup-buildx-action@v3

      - name: Login to Github Container Registry
        uses: docker/login-action@v3
        if: github.ref == 'refs/heads/master'
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate Toolchain Container Metadata
        id: toolchain-meta
        uses: docker/metadata-action@v5
        if: github.ref == 'refs/heads/master'
        with:
          images: ghcr.io/${{ github.repository_owner }}/toolchain-kos-sh4
          flavor: |
            latest=false
            suffix=-${{ matrix.toolchain_profile }},onlatest=true
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=latest,suffix=,enable=${{ (github.ref == format('refs/heads/{0}', 'master')) && (matrix.toolchain_profile == 'stable') }}

      - name: Build Toolchain Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: kos/.github/workflows/Dockerfile
          target: toolchain
          build-args: |
            DCCHAIN_ARGS=toolchain_profile=${{ matrix.toolchain_profile }} gnu_mirror=mirrors.kernel.org
          tags: ${{ steps.toolchain-meta.outputs.tags }}
          labels: ${{ steps.toolchain-meta.outputs.labels }}
          push: ${{ github.ref == 'refs/heads/master' }}
          cache-from: type=gha,scope=${{ matrix.toolchain_profile }}
          cache-to: type=gha,mode=max,scope=${{ matrix.toolchain_profile }}

      - name: Generate KOS Container Metadata
        id: kos-meta
        uses: docker/metadata-action@v5
        if: github.ref == 'refs/heads/master'
        with:
          images: ghcr.io/${{ github.repository_owner }}/kos-dc
          flavor: |
            latest=false
            suffix=-${{ matrix.toolchain_profile }},onlatest=true
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=latest,suffix=,enable=${{ (github.ref == format('refs/heads/{0}', 'master')) && (matrix.toolchain_profile == 'stable') }}

      - name: Build KOS Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: kos/.github/workflows/Dockerfile
          target: kos
          build-args: |
            DCCHAIN_ARGS=toolchain_profile=${{ matrix.toolchain_profile }} gnu_mirror=mirrors.kernel.org
          tags: ${{ steps.kos-meta.outputs.tags }}
          labels: ${{ steps.kos-meta.outputs.labels }}
          push: ${{ github.ref == 'refs/heads/master' }}
          cache-from: type=gha,scope=${{ matrix.toolchain_profile }}
          cache-to: type=gha,mode=max,scope=${{ matrix.toolchain_profile }}

      - uses: actions/checkout@v4
        with:
          repository: KallistiOS/kos-ports
          path: ports

      - name: Generate KOS-Ports Container Metadata
        id: kos-ports-meta
        uses: docker/metadata-action@v5
        if: github.ref == 'refs/heads/master'
        with:
          images: ghcr.io/${{ github.repository_owner }}/kos-ports-dc
          flavor: |
            latest=false
            suffix=-${{ matrix.toolchain_profile }},onlatest=true
          tags: |
            type=sha
            type=raw,value=latest,enable=${{ github.ref == format('refs/heads/{0}', 'master') }}
            type=raw,value=latest,suffix=,enable=${{ (github.ref == format('refs/heads/{0}', 'master')) && (matrix.toolchain_profile == 'stable') }}

      - name: Build KOS-Ports Container
        uses: docker/build-push-action@v5
        with:
          context: .
          file: kos/.github/workflows/Dockerfile
          target: kos-ports
          build-args: |
            DCCHAIN_ARGS=toolchain_profile=${{ matrix.toolchain_profile }} gnu_mirror=mirrors.kernel.org
          tags: ${{ steps.kos-ports-meta.outputs.tags }}
          labels: ${{ steps.kos-ports-meta.outputs.labels }}
          push: ${{ github.ref == 'refs/heads/master' }}
          cache-from: type=gha,scope=${{ matrix.toolchain_profile }}
          cache-to: type=gha,mode=max,scope=${{ matrix.toolchain_profile }}

      - name: Build Examples
        run: |
          docker run --rm \
            -v ${{ github.workspace }}/kos/examples/dreamcast:/examples \
            -w /examples \
            ${{ steps.kos-ports-meta.outputs.tags }} make -j$(nproc)

      - name: Upload Dreamcast Examples
        uses: actions/upload-artifact@v4
        with:
         name: dc-examples-${{ matrix.toolchain_profile }}
         path: ${{ github.workspace }}/kos/examples/dreamcast/**/*.elf

  example_tests_dc:
    name: Test Dreamcast Examples
    needs: docker_build_matrix
    runs-on: [hw, dc]
    strategy:
      fail-fast: false
      matrix:
        toolchain_profile:
          - '9.3.0-legacy'
          - '9.5.0-winxp'
          - '10.5.0'
          - '11.4.0'
          - '12.3.0'
          - 'stable'
          - '13.3.0' 
          - '14.1.0'
          # - '13.3.1-dev'
          # - '14.1.1-dev'
          - '15.0.0-dev' 
        example: [ 'hello', 'basic/memtest32', '2ndmix', 'pvr/pvrmark' ]
        # include:
        #   - { toolchain_profile: '9.3.0-legacy' }
        #   - { toolchain_profile: '9.5.0-winxp' }
        #   - { toolchain_profile: '10.5.0' }
        #   - { toolchain_profile: '11.4.0' }
        #   - { toolchain_profile: '12.3.0' }
        #   - { toolchain_profile: 'stable' }
        #   - { toolchain_profile: '13.3.0' }
        #   - { toolchain_profile: '14.1.0' }
        #   - { toolchain_profile: '13.3.1-dev' }
        #   - { toolchain_profile: '14.1.1-dev' }
        #   - { toolchain_profile: '15.0.0-dev' }

    steps:
      - uses: actions/download-artifact@v4
        with:
          path: ${{ github.workspace }}/examples
          name: dc-examples-${{ matrix.toolchain_profile }}
      
      - run: |
          cd examples/${{ matrix.example }}
          ls -la
          ELF_FILE=$(find . -name "*.elf")
          echo $ELF_FILE
          FILE_NAME=$(basename $(realpath $ELF_FILE))
          FILE_NAME=${{ matrix.toolchain_profile }}-${FILE_NAME%.*}
          echo $FILE_NAME
          python3 /opt/dc/hw/main.py --elf $ELF_FILE --timeout 60 --log $FILE_NAME.txt --video $FILE_NAME.mkv
      
      # Artifact name cannot have '/' in it
      - name: Fix Name
        env:
            EXAMPLE_NAME: "${{ matrix.example }}"
        run: |
          EXAMPLE_NAME=${{ env.EXAMPLE_NAME }}
          EXAMPLE_NAME=${EXAMPLE_NAME////_}
          echo EXAMPLE_NAME=${EXAMPLE_NAME} >> $GITHUB_ENV

      - name: Upload Example Results
        uses: actions/upload-artifact@v4
        with:
          name: dreamcast-examples-${{ matrix.toolchain_profile }}-${{ env.EXAMPLE_NAME }}
          path: |
            ${{ github.workspace }}/examples/${{ matrix.example }}/*.txt
            ${{ github.workspace }}/examples/${{ matrix.example }}/*.mkv
          retention-days: 2
      
      - run: |
          rm -rf ${{ github.workspace }}/examples
